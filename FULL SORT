#include <bits/stdc++.h>
///////////// full sort /////////////////////////
#define f(a,b,n) for(int a=b;a<=n;a++)
#define fd(a,b,n) for(int a=b;a>=n;a--)
using namespace std;

void sw(int &n,int &m)
{
    int ans=n;
    n=m;
    m=ans;
}

////////////////////////////////////////////////
void Interchange_Sort(int a[],int n)
{
    f(i,0,n-2)
    {
        f(j,i+1,n-1)
            if(a[i]>a[j]) sw(a[i],a[j]);
    }

}
////////////////////////////////////////////////
void SelectionSort (int a[], int n)
{
	for (int i=0; i<n-2; i++)
	{
		int minx = i;
		for (int j = i+1; j < n; j++)
			if (a[j] < a[minx])
				minx = j;
		sw(a[i], a[minx]);
	}
}
////////////////////////////////////////////////
void Bubble_Sort(int a[],int n)
{
    f(i,1,n-1)
        fd(j,n,i+1)
            if(a[j]<a[j-1]) sw(a[j],a[j-1]);
}
////////////////////////////////////////////////
void Shaker_Sort(int a[],int n)
{
	int Left = 0;
	int Right = n - 1;
	int k = 0;
	while (Left < Right)
	{
		for (int i = Left; i < Right; i++)
		{
			if (a[i] > a[i + 1])
			{
				sw(a[i], a[i + 1]);
				k = i;
			}
		}
		Right = k;
		for (int i = Right; i > Left; i--)
		{
			if (a[i] < a[i - 1])
			{
				sw(a[i], a[i - 1]);
				k = i;
			}
		}
		Left = k;
	}
}
////////////////////////////////////////////////
void  Insertion_Sort(int a[],int n)
{
    int cas,pos;
    f(i,1,n-1)
    {
        cas=a[i];
        pos=i-1;
        while(pos>=0&&a[pos]>cas)
        {
            a[pos+1]=a[pos];
            pos--;
        }
        a[pos+1]=cas;
    }
}
////////////////////////////////////////////////
void Binary_Insertion_Sortint(int a[],int n)
{
    int l,r,mid,i,x;
    f(i,1,n-1)
    {
        x = a[i];
        l = 0;
        r = i-1;
        while(l<=r)
        {
            mid=(l+r)/2;
            if(x<a[mid]) r=mid-1;
            else l=mid+1;
        }
        for(int j = i-1 ; j >=l ; j--)
        a[j+1] = a[j];
        a[l] = x;
    }

}
////////////////Shell_Sort/////////////////////
void Shell_Sort(int a[],int n)
{
    int dis, i, j, temp;
	for(dis = n/2; dis > 0; dis /= 2)
    {
		for(i = dis; i < n; i++)
		{
			temp = a[i];
			for(j = i; j >= dis && a[j - dis] > temp; j -= dis)
			a[j] = a[j - dis];
			a[j] = temp;
		}
    }
}
// co nhieu cac chon fibonaci, day so nguyen to nhung hieu qua nhat ma nguoi ta do duoc la On^1,2
///////////////Heap_Sort///////////////////////
void Heap_Sort(int a[],int n)
{

}
//////////////quick Sort////////////////////////
void quickSort(int arr[], int left, int right)
{
    int i = left, j = right;
    int tmp;
    int pivot = arr[(left + right) / 2];

    while (i <= j)
    {
        while (arr[i] < pivot) i++;
        while (arr[j] > pivot) j--;
        if (i <= j)
        {
            tmp = arr[i];
            arr[i] = arr[j];
            arr[j] = tmp;
            i++;
            j--;
        }
    }

    if (left < j) quickSort(arr, left, j);
    if (i < right) quickSort(arr, i, right);
}
///////////////Merge_Sort///////////////////////
void merge(int arr[], int l, int m, int r)
{
    int n1 = m - l + 1;
    int n2 = r - m;

    vector <int>Left,Right;

    for (int i = 0; i < n1; i++)
       Left.push_back(arr[l + i]);

    for (int j = 0; j < n2; j++)
        Right.push_back(arr[m + 1 + j]);

    int i = 0, j = 0, k = l;

    while (i < n1 && j < n2)
    {
        if (Left[i] <= Right[j])
        {
            arr[k] = Left[i];
            i++;
        }
        else
        {
            arr[k] = Right[j];
            j++;
        }
        k++;
    }

    while (i < n1)
    {
        arr[k] = Left[i];
        i++;
        k++;
    }

    while (j < n2)
    {
        arr[k] = Right[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        int m = l + (r - l) / 2;

        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}
////////////Radix_Sort//////////////////////////

////////////////////////////////////////////////
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    freopen("process.inp","r",stdin);
    freopen("process.out","w",stdout);
    int a[11],n;
    cin>>n;
    f(i,0,n-1) cin>>a[i];
    //Interchange_Sort(a,n);
    //Shaker_Sort(a,n);
    //Insertion_Sort(a,n);
    //Binary_Insertion_Sortint(a,n);
    //Shell_Sort(a,n);
    //SelectionSort(a,n);
    //quickSort(a,0,n-1);
    //radixsort(a,n);
    //f(i,0,n-1) cout<<a[i]<<" ";
    f(i,0,n-1)
    cout<<a[i]<<" ";
    return 0;
}
